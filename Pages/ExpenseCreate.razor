@page "/expenses/new"
@using System.Net.Http.Json
@using System.Text.Json
@using System.ComponentModel.DataAnnotations
@using ExpenseTracker
@using System.Net.Http
@inject HttpClient Http
@inject NavigationManager NavigationManager

<div class="container mt-5 mb-5">
    <div class="card app-card animated-fade-in">
        <div class="card-header bg-success text-white py-3">
            <div class="d-flex justify-content-between align-items-center">
                <h2 class="page-title m-0"><i class="bi bi-plus-circle me-2"></i>New Expense</h2>
                <a href="/expenses" class="btn btn-outline-light btn-app">
                    <i class="bi bi-arrow-left me-1"></i>Back to Expenses
                </a>
            </div>
        </div>
        
        <div class="card-body p-4">
            @if (errorMessage != null)
            {
                <div class="alert alert-danger shadow-sm" role="alert">
                    <h4 class="alert-heading"><i class="bi bi-exclamation-triangle-fill me-2"></i>Error</h4>
                    <p class="mb-0">@errorMessage</p>
                </div>
            }
            
            <EditForm Model="@expenseModel" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger mb-4 bg-light p-3 rounded" />
                
                <div class="form-section">
                    <h3 class="form-section-title">Basic Information</h3>
                    <div class="row g-3">
                        <div class="col-md-6">
                            <div class="form-floating mb-3">
                                <InputText id="title" @bind-Value="expenseModel.Title" class="form-control" placeholder="Title" />
                                <label for="title">Title <span class="required-asterisk">*</span></label>
                                <ValidationMessage For="@(() => expenseModel.Title)" class="text-danger mt-1" />
                            </div>
                        </div>
                        
                        <div class="col-md-6">
                            <div class="form-floating mb-3">
                                <InputNumber id="amount" @bind-Value="expenseModel.Amount" class="form-control" placeholder="Amount" step="0.01" />
                                <label for="amount">Amount ($) <span class="required-asterisk">*</span></label>
                                <ValidationMessage For="@(() => expenseModel.Amount)" class="text-danger mt-1" />
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="form-section">
                    <h3 class="form-section-title">Additional Details</h3>
                    <div class="row g-3">
                        <div class="col-md-6">
                            <div class="form-floating mb-3">
                                <InputDate id="date" @bind-Value="expenseModel.Date" class="form-control" placeholder="Date" />
                                <label for="date">Date <span class="required-asterisk">*</span></label>
                                <ValidationMessage For="@(() => expenseModel.Date)" class="text-danger mt-1" />
                            </div>
                        </div>
                        
                        <div class="col-md-6">
                            <div class="form-floating mb-3">
                                <InputSelect id="category" @bind-Value="expenseModel.CategoryId" class="form-select" placeholder="Category">
                                    <option value="0" disabled>-- Select a Category --</option>
                                    @if (categories != null)
                                    {
                                        @foreach (var category in categories)
                                        {
                                            <option value="@category.Id">@category.Name</option>
                                        }
                                    }
                                </InputSelect>
                                <label for="category">Category <span class="required-asterisk">*</span></label>
                                <ValidationMessage For="@(() => expenseModel.CategoryId)" class="text-danger mt-1" />
                            </div>
                        </div>
                        
                        <div class="col-12">
                            <div class="form-floating mb-3">
                                <InputTextArea id="description" @bind-Value="expenseModel.Description" class="form-control" style="height: 120px" placeholder="Description" />
                                <label for="description">Description (Optional)</label>
                                <ValidationMessage For="@(() => expenseModel.Description)" class="text-danger mt-1" />
                                <div class="form-text text-muted">Provide any additional details about this expense.</div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="d-flex justify-content-between mt-4">
                    <button type="button" class="btn btn-outline-secondary btn-app" @onclick="HandleCancel">
                        <i class="bi bi-x-lg me-1"></i>Cancel
                    </button>
                    <button type="submit" class="btn btn-success btn-app" disabled="@isSubmitting">
                        @if (isSubmitting)
                        {
                            <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                            <span>Creating...</span>
                        }
                        else
                        {
                            <i class="bi bi-check-lg me-1"></i><span>Create Expense</span>
                        }
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private ExpenseCreateDto expenseModel = new()
    {
        Date = DateTime.Today // Default to today's date
    };
    
    private List<CategoryDto>? categories;
    private string? errorMessage;
    private bool isSubmitting = false;
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            Console.WriteLine("Loading categories...");
            // Load categories for the dropdown
            var response = await Http.GetAsync("api/Category");
            Console.WriteLine($"Category API response status: {response.StatusCode}");
            
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Category API response: {content}");
                
                using (JsonDocument doc = JsonDocument.Parse(content))
                {
                    JsonElement root = doc.RootElement;
                    categories = new List<CategoryDto>();
                    
                    if (root.ValueKind == JsonValueKind.Array)
                    {
                        foreach (JsonElement categoryElement in root.EnumerateArray())
                        {
                            try
                            {
                                var category = new CategoryDto
                                {
                                    Id = categoryElement.GetProperty("id").GetInt32(),
                                    Name = categoryElement.GetProperty("name").GetString() ?? string.Empty
                                };
                                categories.Add(category);
                            }
                            catch (Exception ex)
                            {
                                Console.Error.WriteLine($"Error parsing category: {ex.Message}");
                            }
                        }
                        Console.WriteLine($"Successfully loaded {categories.Count} categories");
                    }
                    else
                    {
                        Console.WriteLine($"Unexpected JSON structure: Root is not an array but {root.ValueKind}");
                    }
                }
            }
            else
            {
                errorMessage = $"Error loading categories: {response.StatusCode}";
                Console.Error.WriteLine(errorMessage);
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.Error.WriteLine($"Category API error response: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
            Console.Error.WriteLine($"Exception while loading categories: {ex}");
        }
    }
    
    private async Task HandleValidSubmit()
    {
        isSubmitting = true;
        errorMessage = null;
        
        try
        {
            // Log the expense model data for debugging
            Console.WriteLine($"Submitting expense: Title={expenseModel.Title}, Amount={expenseModel.Amount}, Date={expenseModel.Date:MM/dd/yyyy}, CategoryId={expenseModel.CategoryId}");
            
            try
            {
                // Configure JSON options with our custom converter
                var jsonOptions = new JsonSerializerOptions
                {
                    PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
                    WriteIndented = true
                };
                jsonOptions.Converters.Add(new DateOnlyJsonConverter());
                
                // Use the simplified PostAsJsonAsync which handles everything for us
                var response = await Http.PostAsJsonAsync("api/Expense", expenseModel, jsonOptions);
                
                Console.WriteLine($"API response status: {response.StatusCode}");
                
                if (response.IsSuccessStatusCode)
                {
                    NavigationManager.NavigateTo("/expenses");
                }
                else
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    Console.Error.WriteLine($"API error response: {errorContent}");
                    errorMessage = $"Error creating expense: {response.StatusCode} - {errorContent}";
                    isSubmitting = false;
                }
            }
            catch (Exception innerEx)
            {
                Console.Error.WriteLine($"Exception during HTTP request: {innerEx.Message}");
                Console.Error.WriteLine($"Stack trace: {innerEx.StackTrace}");
                if (innerEx.InnerException != null)
                {
                    Console.Error.WriteLine($"Inner Exception: {innerEx.InnerException.Message}");
                    Console.Error.WriteLine($"Inner Stack trace: {innerEx.InnerException.StackTrace}");
                }
                throw;  // Rethrow to be caught by outer catch
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Exception in HandleValidSubmit: {ex.Message}");
            Console.Error.WriteLine($"Stack trace: {ex.StackTrace}");
            if (ex.InnerException != null)
            {
                Console.Error.WriteLine($"Inner Exception: {ex.InnerException.Message}");
                Console.Error.WriteLine($"Inner Stack trace: {ex.InnerException.StackTrace}");
            }
            errorMessage = $"Error: {ex.Message}";
            isSubmitting = false;
        }
    }
    
    private void HandleCancel()
    {
        NavigationManager.NavigateTo("/expenses");
    }
} 